applyJoints=function(jointHandles,joints)
    for i=1,#jointHandles,1 do
        simSetJointTargetPosition(jointHandles[i],joints[i])
    end
end


function joint_limits()
    local d2r = 3.141596/180;
    local joints_L={-45*d2r,-90*d2r,-90*d2r,-90*d2r,-90*d2r,-90*d2r,-90*d2r}
    local joints_H={45*d2r,90*d2r,90*d2r,90*d2r,90*d2r,90*d2r,90*d2r}
    return joints_L, joints_H
end
followPath=function(path)
    -- Follows the specified path points. Each path point is a robot configuration. Here we don't do any interpolation
    if path then
        local l=#jh
        local pc=#path/l
        for i=1,pc,1 do
            local config={path[(i-1)*l+1],path[(i-1)*l+2],path[(i-1)*l+3],path[(i-1)*l+4],path[(i-1)*l+5],path[(i-1)*l+6],path[(i-1)*l+7]}
            setConfig(config)
        end
    end
end
generateIkPath=function(startConfig,goalPose,steps) --erro esta aqui
    -- Generates (if possible) a linear, collision free path between a robot config and a target pose
    local currentConfig=getConfig()
    setConfig(startConfig)
    simSetObjectMatrix(ikTarget,-1,goalPose)
    local c=simGenerateIkPath(ikGroup,jh,steps,collisionPairs)
    setConfig(currentConfig)
    return c
end
function findGoalConfig()

    m=simGetObjectMatrix(ikTarget,-1)

    local cc=getConfig() --currentConfiguration
    local cs={} -- saves all found configurations
    local l={} -- saves the distances

    for i=1,100,1 do
        local c=simGetConfigForTipPose(ikGroup,jh,0.65,100,nil,collisionPairs) --nil,collisionPairs
        if c then
        -- Here we check point 3:
            local path=generateIkPath(c,m,50)
               --if i==1 then
                --for j=1,#c,1 do
               -- simAuxiliaryConsolePrint(console, #path..'\n')
                --end
                --end
            if path==nil then
                c=nil
            end
        end

        if c then
            local dist=getConfigConfigDistance(cc,c)
            local p=0
            local same=false
            for j=1,#l,1 do
                if math.abs(l[j]-dist)<0.001 then -- we might have the exact same config. test distance
                    same=true
                    for k=1,#jh,1 do
                        if math.abs(cs[j][k]-c[k])>0.01 then --test the configuration itself
                            same=false
                            break
                        end
                        if same then
                            break
                        end
                    end
                end
            end
            if not same then
                cs[#cs+1]=c
                l[#l+1]=dist
            end
        end
        if #l>=6 then --max Configurations
            break
        end
    end
    if #cs==0 then
        cs=nil
    end
    return cs
end


getPathLength=function(path)
    -- Returns the length of the path in configuration space
    local d=0
    local l=#jh
    local pc=#path/l
    for i=1,pc-1,1 do
        local config1={path[(i-1)*l+1],path[(i-1)*l+2],path[(i-1)*l+3],path[(i-1)*l+4],path[(i-1)*l+5],path[(i-1)*l+6],path[(i-1)*l+7]}
        local config2={path[i*l+1],path[i*l+2],path[i*l+3],path[i*l+4],path[i*l+5],path[i*l+6],path[i*l+7]}
        d=d+getConfigConfigDistance(config1,config2)
    end
    return d
end

getConfigConfigDistance=function(config1,config2)
    -- Returns the distance (in configuration space) between two configurations
    local d=0
    for i=1,#jh,1 do
        local dx=(config1[i]-config2[i])*metric[i]
        d=d+dx*dx
    end
    return math.sqrt(d)
end
getConfig=function()
    -- Returns the current robot configuration
    local config={}
    for i=1,#jh,1 do
        config[i]=simGetJointPosition(jh[i])
    end
    return config
end

setConfig=function(config) --simSetJointPosition
    -- Applies the specified configuration to the robot
    if config then
        for i=1,#jh,1 do
            simSetJointPosition(jh[i],config[i])
        end
    end
end

function motionPlanning(goalConfigs)

    task=simExtOMPL_createTask('task')
    local j_spaces={-1,-1,-1,-1,-1,-1,-1}
    simExtOMPL_setAlgorithm(task,sim_ompl_algorithm_RRTConnect)
   -- local joints_L,joints_H = joint_limits()

   -- for i=1,#jh,1 do
   --     j_spaces[i]=simExtOMPL_createStateSpace('j'..i..'_space',sim_ompl_statespacetype_joint_position,jh[i],joints_L[i],joints_H[i],1)
   -- end
   -- simExtOMPL_setStateSpace(task,{j_space[1],j_space[2],j_space[3],j_space[4],j_space[5],j_space[6],j_space[7]})

    local j1_space=simExtOMPL_createStateSpace('j1_space',sim_ompl_statespacetype_joint_position,jh[1],{-170*math.pi/180},{170*math.pi/180},1)
    local j2_space=simExtOMPL_createStateSpace('j2_space',sim_ompl_statespacetype_joint_position,jh[2],{-120*math.pi/180},{120*math.pi/180},2)
    local j3_space=simExtOMPL_createStateSpace('j3_space',sim_ompl_statespacetype_joint_position,jh[3],{-170*math.pi/180},{170*math.pi/180},3)
    local j4_space=simExtOMPL_createStateSpace('j4_space',sim_ompl_statespacetype_joint_position,jh[4],{-120*math.pi/180},{120*math.pi/180},0)
    local j5_space=simExtOMPL_createStateSpace('j5_space',sim_ompl_statespacetype_joint_position,jh[5],{-170*math.pi/180},{170*math.pi/180},0)
    local j6_space=simExtOMPL_createStateSpace('j6_space',sim_ompl_statespacetype_joint_position,jh[6],{-120*math.pi/180},{120*math.pi/180},0)
    local j7_space=simExtOMPL_createStateSpace('j7_space',sim_ompl_statespacetype_joint_position,jh[7],{-170*math.pi/180},{170*math.pi/180},0)

    simExtOMPL_setStateSpace(task,{j1_space,j2_space,j3_space,j4_space,j5_space,j6_space,j7_space})

    simExtOMPL_setCollisionPairs(task,collisionPairs)

    simExtOMPL_setStartState(task,getConfig())

    simExtOMPL_setGoalState(task,goalConfigs[1])

        for i=2,#goalConfigs,1 do
        simExtOMPL_addGoalState(task,goalConfigs[i])
        end

    local l=9999999999
    local path=nil

    for i=1,6,1 do
        local res,_path=simExtOMPL_compute(task,4,-1,300)
        if res>0 and _path then
            local _l=getPathLength(_path)
            if _l<l then
                l=_l
                path=_path
            end
        end
    end

    simExtOMPL_destroyTask(task)
    return path

end
if (sim_call_type==sim_childscriptcall_initialization) then
jh={-1,-1,-1,-1,-1,-1,-1}
for i=1,7,1 do
    jh[i]=simGetObjectHandle('Sawyer_joint'..i)
end
headCameraHandle=simGetObjectHandle('Sawyer_head_camera')
simSetExplicitHandling(headCameraHandle,1) -- disable the head camera
wristCameraHandle=simGetObjectHandle('Sawyer_wristCamera')
simSetExplicitHandling(wristCameraHandle,1) -- disable the wrist camera

tip=simGetObjectHandle('Sawyer_tip')
ikTarget=simGetObjectHandle('Sawyer_target')
ikGroup=simGetIkGroupHandle('ik_Sawyer')

metric={0.5,1,1,0.5,0.1,0.2,0.1}
ikShift=0.1
ikSteps=50

collisionPairs={simGetCollectionHandle('Sawyer'),sim_handle_all}

solver=1

console=simAuxiliaryConsoleOpen('consle',100,0000)
end


if (sim_call_type==sim_childscriptcall_actuation) then

if solver == 1 then
    --c=nil
    --while(c==nil) do
    local c = findGoalConfig()
    --for j=1,#c,1 do
    --simAuxiliaryConsolePrint(console, #c..'\n')
    --end
    --end
    --local path = motionPlanning(c)
    --followpath(path)
    solver=0
end

 --   if cnt==0 then
 --       while(cnt2==0) do
 --       state=simGetConfigForTipPose(ikGroup,jointHandles,0.65,100)
 --           if state[1]<45*d2r and state[1]>-45*d2r then
 --           cnt2=1
 --           end
 --       end
 --      if state then
 --           applyJoints(jointHandles,state)
 --       end
 --  console = simAuxiliaryConsoleOpen("Aux Console", 500, 25)
 --   end
 --   cnt=cnt+1
 --   cnt2=0

 --   simAuxiliaryConsolePrint(console, state[2]/d2r)

end


if (sim_call_type==sim_childscriptcall_sensing) then

	-- Put your main SENSING code here

end


if (sim_call_type==sim_childscriptcall_cleanup) then

	-- Put some restoration code here

end
