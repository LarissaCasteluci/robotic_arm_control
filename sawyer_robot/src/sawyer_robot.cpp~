// Copyright 2006-2016 Coppelia Robotics GmbH. All rights reserved.
// marc@coppeliarobotics.com
// www.coppeliarobotics.com


//get time of the day // linux command
//node.publish
//node.subscribe

#include <stdio.h>
#include <stdlib.h>
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include "std_msgs/Float32.h"
#include "sensor_msgs/Image.h"

// Global variables (also modified by the topic subscriber):
struct timeval tv;	//timevalue
unsigned int currentTime_updatedByTopicSubscriber=0;
float simulationTime=0.0;

// Topic subscriber callbacks:
void simulationTimeCallback(const std_msgs::Float32& simTime)
{
    simulationTime=simTime.data; //update data
}

//void headCameraCallback(const sensor_msgs::Image& hCamera)
//{
//const uint8 headCamera[hCamera.height, hCamera.width] = hCamera.data;
//}

//void wristCameraCallBack(const sensor_msgs::Image& wCamera)
//{
//global uint8 wristCamera[wCamera.height, wCamera.width]
//wristCamera=wCamera.data;
//}

// Main code:
int main(int argc,char* argv[])
{
    // The robot motor velocities and the sensor topic names are given in the argument list
    // (when V-REP launches this executable, V-REP will also provide the argument list)
	//TOPICS
    std::string joint1Topic;
    std::string joint2Topic;
    std::string joint3Topic;
    std::string joint4Topic;
    std::string joint5Topic;
    std::string joint6Topic;
    std::string joint7Topic;
    std::string headCameraTopic;
    std::string wristCameraTopic;
    std::string simulationTimeTopic;

    if (argc>=11)
    {
          joint1Topic=argv[1];
          joint2Topic=argv[2];
	  joint3Topic=argv[3];
	  joint4Topic=argv[4];
	  joint5Topic=argv[5];
	  joint6Topic=argv[6];
	  joint7Topic=argv[7];
	  headCameraTopic=argv[8];
	  wristCameraTopic=argv[9];
          simulationTimeTopic=argv[10];
              joint1Topic="/"+joint1Topic;
	      joint2Topic="/"+joint2Topic;
	      joint3Topic="/"+joint3Topic;
	      joint4Topic="/"+joint4Topic;
	      joint5Topic="/"+joint5Topic;
	      joint6Topic="/"+joint6Topic;
	      joint7Topic="/"+joint7Topic;
	      headCameraTopic="/"+headCameraTopic;
	      wristCameraTopic="/"+wristCameraTopic;
              simulationTimeTopic="/"+simulationTimeTopic;
    }
    else
    {
        printf("Indicate following arguments: 'leftMotorTopic rightMotorTopic sensorTopic simulationTimeTopic'!\n");
        sleep(5000);
        return 0;
    }

    // Create a ROS node. The name has a random component:
      int _argc = 0;
      char** _argv = NULL;
      if (gettimeofday(&tv,NULL)==0)
          currentTime_updatedByTopicSubscriber=(tv.tv_sec*1000+tv.tv_usec/1000)&0x00ffffff;
      std::string nodeName("sawyer_robot");
      std::string randId(boost::lexical_cast<std::string>(currentTime_updatedByTopicSubscriber+int(999999.0f*(rand()/(float)RAND_MAX))));
      nodeName+=randId;


    ros::init(_argc,_argv,"sawyer_robot");
    if(!ros::master::check())
    return(0);
    ros::NodeHandle n;
    printf("Sawyer just started with node name %s\n",nodeName.c_str());

    // 1. Let's subscribe to the sensor and simulation time stream
    ros::Subscriber subSimulationTime=n.subscribe(simulationTimeTopic.c_str(),1,simulationTimeCallback);
    //ros::Subscriber subHeadCamera=n.subscribe(headCameraTopic.c_str(),1,headCameraCallback);
    //ros::Subscriber subWristCamera=n.subscribe(wristCameraTopic.c_str(),1,wristCameraCallback);

    // 2. Let's prepare publishers for the joints positions:
    ros::Publisher joint1PositionPub=n.advertise<std_msgs::Float32>(joint1Topic.c_str(),1);
    ros::Publisher joint2PositionPub=n.advertise<std_msgs::Float32>(joint2Topic.c_str(),1);
    ros::Publisher joint3PositionPub=n.advertise<std_msgs::Float32>(joint3Topic.c_str(),1);
    ros::Publisher joint4PositionPub=n.advertise<std_msgs::Float32>(joint4Topic.c_str(),1);
    ros::Publisher joint5PositionPub=n.advertise<std_msgs::Float32>(joint5Topic.c_str(),1);
    ros::Publisher joint6PositionPub=n.advertise<std_msgs::Float32>(joint6Topic.c_str(),1);
    ros::Publisher joint7PositionPub=n.advertise<std_msgs::Float32>(joint7Topic.c_str(),1);

    // 3. Finally we have the control loop:
    float driveBackStartTime=-99.0f;
    unsigned int currentTime;
    if (gettimeofday(&tv,NULL)==0)
    {
        currentTime_updatedByTopicSubscriber=tv.tv_sec;
        currentTime=currentTime_updatedByTopicSubscriber;
    }


    float desiredjoint1Position;
    float desiredjoint2Position;
    float desiredjoint3Position;
    float desiredjoint4Position;
    float desiredjoint5Position;
    float desiredjoint6Position;
    float desiredjoint7Position;



    while (ros::ok())
    {
	// this is the control loop (very simple, just as an example)
        if (gettimeofday(&tv,NULL)==0)
        {
            currentTime=tv.tv_sec;
            if (currentTime-currentTime_updatedByTopicSubscriber>20)
                break; // we didn't receive any sensor information for quite a while... we leave
        }
         // Printing Simulation Time
	printf("Simulation time is %f \n", simulationTime);



        std_msgs::Float32 d;
          d.data=desiredjoint1Position;
        	joint1PositionPub.publish(d);
          d.data=desiredjoint2Position;
       		 joint2PositionPub.publish(d);
	  d.data=desiredjoint3Position;
        	joint3PositionPub.publish(d);
          d.data=desiredjoint4Position;
        	joint4PositionPub.publish(d);
       	  d.data=desiredjoint5Position;
        	joint5PositionPub.publish(d);
	  d.data=desiredjoint6Position;
        	joint6PositionPub.publish(d);
	  d.data=desiredjoint7Position;
        	joint7PositionPub.publish(d);



        // handle ROS messages:
        ros::spinOnce();

        // sleep a bit:
        usleep(10000);
    }
      ros::shutdown();
      printf("sawyer is over!\n");
    return(0);
}
